package expo.modules.termuxcore.terminal;

/**
 * Native methods for creating and managing pseudoterminal subprocesses. C code is in jni/termux.c.
 */
final class JNI {

    // Stub implementation for testing Java compilation
    // Native library loading disabled temporarily
    // static {
    //     System.loadLibrary("termux");
    // }

    /**
     * Create a subprocess. Differs from {@link ProcessBuilder} in that a pseudoterminal is used to communicate with the
     * subprocess.
     * <p/>
     * Callers are responsible for calling {@link #close(int)} on the returned file descriptor.
     *
     * @param cmd       The command to execute
     * @param cwd       The current working directory for the executed command
     * @param args      An array of arguments to the command
     * @param envVars   An array of strings of the form "VAR=value" to be added to the environment of the process
     * @param processId A one-element array to which the process ID of the started process will be written.
     * @return the file descriptor resulting from opening /dev/ptmx master device. The sub process will have opened the
     * slave device counterpart (/dev/pts/$N) and have it as stdint, stdout and stderr.
     */
    public static int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId, int rows, int columns, int cellWidth, int cellHeight) {
        // Stub implementation - would be native in real version
        throw new UnsupportedOperationException("Native JNI methods not available in stub implementation");
    }

    /** Set the window size for a given pty, which allows connected programs to learn how large their screen is. */
    public static void setPtyWindowSize(int fd, int rows, int cols, int cellWidth, int cellHeight) {
        // Stub implementation - would be native in real version
        throw new UnsupportedOperationException("Native JNI methods not available in stub implementation");
    }

    /**
     * Causes the calling thread to wait for the process associated with the receiver to finish executing.
     *
     * @return if >= 0, the exit status of the process. If < 0, the signal causing the process to stop negated.
     */
    public static int waitFor(int processId) {
        // Stub implementation - would be native in real version
        throw new UnsupportedOperationException("Native JNI methods not available in stub implementation");
    }

    /** Close a file descriptor through the close(2) system call. */
    public static void close(int fileDescriptor) {
        // Stub implementation - would be native in real version
        throw new UnsupportedOperationException("Native JNI methods not available in stub implementation");
    }

}