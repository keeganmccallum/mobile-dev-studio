name: APK Validation Testing

on:
  workflow_run:
    workflows: ["Build and Release APKs"]
    types:
      - completed
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  test-apk-builds:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Reasonable timeout - tests should complete in under 10 minutes
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    strategy:
      matrix:
        build_type: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Download APK Artifacts
      id: download-apk
      run: |
        # Download APK from the build workflow
        echo "Downloading APK artifacts..."
        
        # Get the latest COMPLETED build run with APK artifacts
        # This handles cases where APK build succeeds but release step fails
        echo "Searching for latest completed build with APK artifacts..."
        
        LATEST_RUN=""
        for run_id in $(gh run list --workflow="Build and Release APKs" --limit=15 --status=completed --json=databaseId --jq='.[].databaseId'); do
          echo "Checking completed run $run_id for artifacts..."
          if gh api /repos/${{ github.repository }}/actions/runs/$run_id/artifacts --jq='.artifacts[] | select(.name | startswith("apk-${{ matrix.build_type }}")) | .name' | head -1 | grep -q "apk-"; then
            LATEST_RUN=$run_id
            echo "Found APK artifacts in run: $LATEST_RUN"
            break
          fi
        done
        
        if [ -z "$LATEST_RUN" ]; then
          echo "No build with APK artifacts found"
          exit 1
        fi
        
        # Get the artifact name pattern (includes build number)
        ARTIFACT_NAME=$(gh api /repos/${{ github.repository }}/actions/runs/$LATEST_RUN/artifacts --jq='.artifacts[] | select(.name | startswith("apk-${{ matrix.build_type }}")) | .name' | head -1)
        echo "Artifact name: $ARTIFACT_NAME"
        
        if [ -z "$ARTIFACT_NAME" ]; then
          echo "No artifact found for build type: ${{ matrix.build_type }}"
          exit 1
        fi
        
        # Download the specific build type APK
        gh run download $LATEST_RUN --name "$ARTIFACT_NAME" --dir ./apk-download
        
        # Find the APK file
        APK_FILE=$(find ./apk-download -name "*.apk" -type f | head -1)
        echo "Found APK: $APK_FILE"
        
        if [ -z "$APK_FILE" ]; then
          echo "No APK file found"
          exit 1
        fi
        
        # Convert to absolute path to avoid issues
        APK_ABSOLUTE=$(realpath "$APK_FILE")
        echo "Absolute APK path: $APK_ABSOLUTE"
        
        echo "apk_path=$APK_ABSOLUTE" >> $GITHUB_OUTPUT
        echo "apk_name=$(basename $APK_FILE)" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        
    - name: AVD Cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-api-30-validation
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run APK Validation Tests
      id: test-apk
      uses: reactivecircus/android-emulator-runner@v2
      env:
        APK_PATH: ${{ steps.download-apk.outputs.apk_path }}
        BUILD_TYPE: ${{ matrix.build_type }}
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: ./.github/scripts/validate-apk.sh
          
    - name: Upload Test Screenshots and Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apk-validation-${{ matrix.build_type }}-debug-artifacts
        path: |
          screenshots/${{ matrix.build_type }}/
        retention-days: 30
        if-no-files-found: warn
        
    - name: Create Test Report
      if: always()
      run: |
        mkdir -p test-reports
        
        BUILD_TYPE="${{ matrix.build_type }}"
        APK_NAME="${{ steps.download-apk.outputs.apk_name }}"
        
        cat > test-reports/validation-report-$BUILD_TYPE.md << EOF
        # APK Validation Report - $BUILD_TYPE Build
        
        **APK:** \`$APK_NAME\`
        **Build Type:** $BUILD_TYPE
        **Test Date:** $(date -u)
        **Test Result:** ${{ job.status }}
        
        ## Test Results
        
        - ${{ steps.test-apk.outcome == 'success' && '✅' || '❌' }} APK Installation: ${{ steps.test-apk.outcome == 'success' && 'Success' || 'Failed' }}
        - ${{ steps.test-apk.outcome == 'success' && '✅' || '❌' }} App Launch: ${{ steps.test-apk.outcome == 'success' && 'Success' || 'Failed' }}
        - ${{ steps.test-apk.outcome == 'success' && '✅' || '❌' }} No Immediate Crashes: ${{ steps.test-apk.outcome == 'success' && 'Success' || 'Failed' }}
        - ${{ steps.test-apk.outcome == 'success' && '✅' || '❌' }} Tab Navigation: ${{ steps.test-apk.outcome == 'success' && 'Success' || 'Failed' }}
        - ${{ steps.test-apk.outcome == 'success' && '✅' || '❌' }} Termux Integration: ${{ steps.test-apk.outcome == 'success' && 'Success' || 'Failed' }}
        - ${{ steps.test-apk.outcome == 'success' && '✅' || '❌' }} App Lifecycle: ${{ steps.test-apk.outcome == 'success' && 'Success' || 'Failed' }}
        
        ## Screenshots
        
        All test screenshots have been captured and uploaded as artifacts.
        
        ## Logs
        
        App logs and any crash logs have been captured for analysis.
        EOF
        
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apk-validation-${{ matrix.build_type }}-report
        path: test-reports/
        retention-days: 30
        
    - name: Post Test Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const buildType = '${{ matrix.build_type }}';
          const apkName = '${{ steps.download-apk.outputs.apk_name }}';
          const testResult = '${{ job.status }}';
          const runId = context.runId;
          
          const statusEmoji = testResult === 'success' ? '✅' : '❌';
          const statusText = testResult === 'success' ? 'PASSED' : 'FAILED';
          
          const comment = `## ${statusEmoji} APK Validation Results - ${buildType.toUpperCase()}
          
          **APK:** \`${apkName}\`  
          **Test Status:** ${statusText}  
          **Run ID:** ${runId}
          
          ### Test Coverage
          - ${statusEmoji} APK Installation
          - ${statusEmoji} App Launch (No Crashes)
          - ${statusEmoji} Tab Navigation
          - ${statusEmoji} Termux Integration Response
          - ${statusEmoji} App Lifecycle (Background/Foreground)
          
          📸 [View Screenshots](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts)
          📋 [Download Test Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts)
          `;
          
          // Create a gist with the test results for easy sharing
          try {
            const gist = await github.rest.gists.create({
              description: `APK Validation Results - ${buildType} - ${new Date().toISOString()}`,
              public: false,
              files: {
                [`apk-validation-${buildType}.md`]: {
                  content: comment
                }
              }
            });
            
            console.log(`Test results gist created: ${gist.data.html_url}`);
          } catch (error) {
            console.log('Failed to create gist:', error.message);
          }