name: Fast Development Build

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  build-android-fast:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    # Cache everything aggressively for dev builds
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
          modules/termux-core/android/.gradle
        key: gradle-dev-${{ runner.os }}-${{ hashFiles('**/*.gradle*', 'gradle.properties') }}
        restore-keys: |
          gradle-dev-${{ runner.os }}-
          gradle-${{ runner.os }}-
          
    - name: Cache Android NDK & SDK
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/lib/android/sdk/ndk
          /usr/local/lib/android/sdk/cmake
          /usr/local/lib/android/sdk/build-tools
        key: android-components-${{ runner.os }}-v2
        restore-keys: |
          android-components-${{ runner.os }}-
          
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          modules/termux-core/node_modules
          ~/.npm
        key: npm-dev-${{ runner.os }}-${{ hashFiles('package-lock.json', 'modules/termux-core/package-lock.json') }}
        restore-keys: |
          npm-dev-${{ runner.os }}-
          
    - name: Install dependencies (fast)
      run: |
        # Skip optional dependencies and use ci for speed
        npm ci --prefer-offline --no-audit --no-fund
        cd modules/termux-core && npm ci --prefer-offline --no-audit --no-fund
        
    - name: Install Expo CLI (cached)
      run: |
        # Check if expo is already available
        if ! command -v expo &> /dev/null; then
          npm install -g @expo/cli --prefer-offline
        fi
        
    - name: Prebuild Expo project (cached)
      run: |
        # Use npm script for consistency
        npx expo prebuild --platform android --clear=false
        
    - name: Build Android APK (optimized)
      run: |
        cd android
        # Enable all optimizations for faster builds
        ./gradlew assemble${{ github.event.inputs.build_type == 'release' && 'Release' || 'Debug' }} \
          --parallel \
          --build-cache \
          --configuration-cache \
          --no-scan \
          -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseParallelGC" \
          -Dkotlin.incremental=true
        
    - name: Prepare APK
      id: apk_info
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type }}"
        BUILD_NUMBER=${GITHUB_RUN_NUMBER}
        COMMIT_SHA=${GITHUB_SHA::8}
        
        if [ "$BUILD_TYPE" = "release" ]; then
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
        else
          APK_PATH="android/app/build/outputs/apk/debug/app-debug.apk"
        fi
        
        APK_NAME="mobile-dev-studio-dev-${BUILD_TYPE}-${BUILD_NUMBER}-${COMMIT_SHA}.apk"
        
        if [ -f "$APK_PATH" ]; then
          mv "$APK_PATH" "$APK_NAME"
          echo "✅ APK ready: $APK_NAME"
          ls -lh "$APK_NAME"
        else
          echo "❌ APK not found at: $APK_PATH"
          find android/app/build/outputs/apk -name "*.apk" -type f
          exit 1
        fi
        
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: dev-apk-${{ github.event.inputs.build_type }}-${{ steps.apk_info.outputs.build_number }}
        path: ${{ steps.apk_info.outputs.apk_name }}
        retention-days: 7
        
    - name: Generate download link
      run: |
        echo "## 🚀 Development Build Ready!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Info:**" >> $GITHUB_STEP_SUMMARY
        echo "- Type: \`${{ github.event.inputs.build_type }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Build: \`${{ steps.apk_info.outputs.build_number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: \`${{ steps.apk_info.outputs.commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- File: \`${{ steps.apk_info.outputs.apk_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📎 [Download APK](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY