name: Debug APK Build with Enhanced Logging

on:
  workflow_dispatch:
    inputs:
      enable_verbose_logging:
        description: 'Enable verbose native logging'
        required: false
        default: 'true'
        type: boolean
      build_type:
        description: 'Build type to create'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

env:
  NODE_ENV: development
  EXPO_DEBUG: 1

jobs:
  debug-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Enable Enhanced Debug Logging
      if: ${{ inputs.enable_verbose_logging }}
      run: |
        echo "üîç Enabling enhanced debug logging..."
        
        # Add debug logging to app.json
        node -e "
          const fs = require('fs');
          const config = JSON.parse(fs.readFileSync('app.json', 'utf8'));
          
          // Add debug configuration
          config.expo.extra = config.expo.extra || {};
          config.expo.extra.debugMode = true;
          config.expo.extra.verboseLogging = true;
          
          fs.writeFileSync('app.json', JSON.stringify(config, null, 2));
          console.log('‚úÖ Debug configuration added to app.json');
        "
        
        # Enable React Native debug logging
        echo "export RN_ENABLE_DEBUG_LOGGING=1" >> $GITHUB_ENV
        echo "export REACT_NATIVE_DEBUG=1" >> $GITHUB_ENV
        
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies with verbose output..."
        npm ci --verbose
        
    - name: Pre-build Analysis
      run: |
        echo "üìã Pre-build analysis..."
        
        echo "Node modules structure:"
        ls -la node_modules/ | head -10
        
        echo "React Native version:"
        npm list react-native
        
        echo "Expo CLI version:"
        npx expo --version
        
        echo "Android environment:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "Java version: $(java -version 2>&1 | head -1)"
        
    - name: Create Debug-Enhanced Bundle
      run: |
        echo "üì± Creating debug-enhanced bundle..."
        
        # Create bundle with source maps and debug info
        npx expo export \
          --platform android \
          --output-dir dist-debug \
          --dev \
          --clear \
          --source-maps
          
        echo "Bundle contents:"
        find dist-debug -type f -name "*.js" -o -name "*.map" | head -10
        
    - name: Build Debug APK
      run: |
        echo "üî® Building debug APK with enhanced logging..."
        
        cd android
        
        # Enable Gradle debug output
        ./gradlew assembleDebug \
          --info \
          --stacktrace \
          --debug \
          -Dorg.gradle.logging.level=info \
          -Dorg.gradle.console=plain
          
    - name: APK Analysis
      run: |
        echo "üì± Analyzing built APK..."
        
        APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -1)
        echo "APK Location: $APK_PATH"
        echo "APK Size: $(du -h "$APK_PATH" | cut -f1)"
        
        # APK content analysis
        if command -v aapt &> /dev/null; then
          echo "APK Permissions:"
          aapt dump permissions "$APK_PATH" | head -10
          
          echo "APK Package Info:"
          aapt dump badging "$APK_PATH" | grep -E "(package|version)"
        fi
        
        # Create build manifest
        BUILD_NUM=$(echo $GITHUB_SHA | cut -c1-8)
        cat > build-manifest-debug.json << EOF
        {
          "buildNumber": "$BUILD_NUM",
          "commitSha": "$GITHUB_SHA",
          "buildDate": "$(date -u -Iseconds)",
          "buildType": "${{ inputs.build_type }}",
          "apkPath": "$APK_PATH",
          "apkSize": "$(stat -c%s "$APK_PATH" 2>/dev/null || echo 0)",
          "verboseLogging": ${{ inputs.enable_verbose_logging }},
          "debugMode": true
        }
        EOF
        
    - name: Create Debug Package
      run: |
        echo "üì¶ Creating debug package..."
        
        mkdir -p debug-artifacts
        
        # Copy APK
        cp android/app/build/outputs/apk/debug/*.apk debug-artifacts/
        
        # Copy build manifest
        cp build-manifest-debug.json debug-artifacts/
        
        # Copy relevant logs
        if [ -f "android/build.log" ]; then
          cp android/build.log debug-artifacts/
        fi
        
        # Create debug info
        cat > debug-artifacts/debug-info.txt << EOF
        Debug Build Information
        ======================
        
        Build Date: $(date -u)
        Commit: $GITHUB_SHA
        Verbose Logging: ${{ inputs.enable_verbose_logging }}
        Build Type: ${{ inputs.build_type }}
        
        Environment:
        - Node: $(node --version)
        - NPM: $(npm --version)
        - Java: $(java -version 2>&1 | head -1)
        - Expo: $(npx expo --version)
        
        Bundle Info:
        $(find dist-debug -name "*.js" | wc -l) JS files
        $(find dist-debug -name "*.map" | wc -l) source maps
        
        Next Steps:
        1. Download debug artifacts
        2. Run APK Validation Testing
        3. Analyze crash logs if app fails
        EOF
        
        echo "Debug package created with $(ls debug-artifacts | wc -l) files"
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ github.sha }}
        path: debug-artifacts/
        retention-days: 7
        
    - name: Trigger APK Validation
      if: success()
      run: |
        echo "üöÄ Triggering APK validation for debug build..."
        
        # Trigger APK validation workflow
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/apk-validation.yml/dispatches \
          -d '{"ref":"${{ github.ref_name }}"}'
          
        echo "‚úÖ APK validation triggered"
        
    - name: Post Build Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}';
          const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
          
          console.log(`${emoji} Debug Build ${status.toUpperCase()}`);
          console.log(`Commit: ${context.sha.substring(0, 7)}`);
          console.log(`Verbose Logging: ${{ inputs.enable_verbose_logging }}`);
          
          if (status === 'success') {
            console.log('üöÄ APK validation triggered automatically');
            console.log('üì± Download debug artifacts for detailed analysis');
          } else {
            console.log('üîß Check build logs for compilation errors');
          }