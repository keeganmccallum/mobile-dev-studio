name: Test C++ JNI Compilation

on:
  push:
    branches: [ main ]
    paths: 
      - 'modules/termux-core/android/src/main/cpp/**'
      - 'modules/termux-core/android/CMakeLists.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/termux-core/android/src/main/cpp/**'
      - 'modules/termux-core/android/CMakeLists.txt'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  test-cpp-compilation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: |
        npm install
        cd modules/termux-core && npm install && cd ../..
        
    - name: Install Expo CLI
      run: npm install -g @expo/cli
      
    - name: Prebuild Expo project
      run: |
        npx expo prebuild --platform android --clear
        
    - name: Test C++ compilation only
      run: |
        cd android
        
        # Test if C++ files compile without full APK build
        echo "Testing C++ compilation..."
        ./gradlew :termux-core:buildCMakeDebug --no-daemon --info
        
        # Show compilation results
        echo "✅ C++ compilation successful!"
        find . -name "*.so" -type f | head -10
        
    - name: Verify JNI symbols
      run: |
        cd android
        
        # Find the compiled library
        SO_FILE=$(find . -name "libtermux-core.so" -type f | head -1)
        
        if [ -n "$SO_FILE" ]; then
          echo "Found compiled library: $SO_FILE"
          
          # Check if required JNI functions are present
          nm -D "$SO_FILE" 2>/dev/null | grep -E "(createSubprocess|setPtyWindowSize|waitFor|close)" || echo "Symbol check failed - this is expected for stripped libraries"
          
          echo "✅ JNI library compiled successfully"
          ls -la "$SO_FILE"
        else
          echo "❌ No compiled library found"
          exit 1
        fi