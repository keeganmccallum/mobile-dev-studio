name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm run test:unit
        npm run test:integration
      continue-on-error: true

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Expo CLI
      run: npm install -g @expo/cli eas-cli
      
    - name: Prebuild Expo project
      run: npx expo prebuild --platform android
      
    - name: Bundle JavaScript for production
      run: |
        # Create the bundle using expo export
        npx expo export --platform android --output-dir dist
        mkdir -p android/app/src/main/assets
        
        # Check what was actually created
        echo "📁 Checking export output:"
        find dist -type f -name "*android*" || echo "No android bundle files found"
        
        # Find the bundle file (could be .js or .hbc)
        BUNDLE_FILE=""
        if [ -d "dist/_expo/static/js/android" ]; then
          BUNDLE_FILE=$(find dist/_expo/static/js/android -type f \( -name "*.js" -o -name "*.hbc" \) | head -1)
        fi
        
        # Fallback to other locations
        if [ -z "$BUNDLE_FILE" ]; then
          BUNDLE_FILE=$(find dist -type f \( -name "*.js" -o -name "*.hbc" \) | grep -i android | head -1)
        fi
        
        if [ -n "$BUNDLE_FILE" ] && [ -f "$BUNDLE_FILE" ]; then
          cp "$BUNDLE_FILE" android/app/src/main/assets/index.android.bundle
          echo "✅ Production bundle included from: $BUNDLE_FILE"
          ls -la android/app/src/main/assets/index.android.bundle
        else
          echo "❌ Bundle creation failed - no bundle file found"
          echo "Contents of dist directory:"
          find dist -type f | head -20
          exit 1
        fi
        
    - name: Setup Android keystore
      run: |
        if [ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
          echo "🔑 Creating test keystore for release build..."
          keytool -genkey -v -keystore android/app/release.keystore \
                  -alias androiddebugkey \
                  -keyalg RSA -keysize 2048 -validity 10000 \
                  -storepass android -keypass android \
                  -dname "CN=Test, OU=Test, O=Test, L=Test, S=Test, C=US"
          echo "KEYSTORE_PATH=release.keystore" >> android/gradle.properties
          echo "KEYSTORE_PASSWORD=android" >> android/gradle.properties  
          echo "KEY_ALIAS=androiddebugkey" >> android/gradle.properties
          echo "KEY_PASSWORD=android" >> android/gradle.properties
        else
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/release.keystore
          echo "KEYSTORE_PATH=release.keystore" >> android/gradle.properties
          echo "KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/gradle.properties
          echo "KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/gradle.properties
          echo "KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/gradle.properties
        fi
        
    - name: Generate release signing config
      run: |
        cat >> android/app/build.gradle << 'EOF'
        
        android {
            signingConfigs {
                release {
                    storeFile file('release.keystore')
                    storePassword System.getenv('KEYSTORE_PASSWORD') ?: project.findProperty('KEYSTORE_PASSWORD')
                    keyAlias System.getenv('KEY_ALIAS') ?: project.findProperty('KEY_ALIAS')
                    keyPassword System.getenv('KEY_PASSWORD') ?: project.findProperty('KEY_PASSWORD')
                }
            }
            buildTypes {
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
        EOF
        
    - name: Build production Android APK
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Mobile Dev Studio ${{ github.ref }}
        body: |
          ## Mobile Dev Studio Release
          
          ### Features
          - ⚡ Real Termux terminal integration
          - 🌐 Live preview with development server
          - 📝 Code editor with syntax highlighting
          - 🔄 Seamless tab-based workflow
          
          ### Technical Details
          - Native Android terminal emulation
          - Complete Linux environment (29MB bootstrap)
          - Real subprocess execution with PTY
          - Development server integration
          
          ### Download
          - Android APK available below
          - Install and run real Linux commands on your mobile device
          
          Built with ❤️ using Expo + Real Termux Integration
        draft: false
        prerelease: false

    - name: Upload Android APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: android/app/build/outputs/apk/release/app-release.apk
        asset_name: mobile-dev-studio-${{ github.ref_name }}-android.apk
        asset_content_type: application/vnd.android.package-archive